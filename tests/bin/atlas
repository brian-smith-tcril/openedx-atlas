#!/bin/bash
#
# openedx-atlas argbash (https://argbash.dev/) argument template
#
# ARG_OPTIONAL_SINGLE([config],[],[path to alternative atlas.yaml configuration file])
# ARG_OPTIONAL_SINGLE([branch],[b],[A branch of translation files])
# ARG_OPTIONAL_SINGLE([repository],[r],[The repository containing translation files])
# ARG_OPTIONAL_SINGLE([directory],[d],[Directory (name of the repository) containing translations to be downloaded])
# ARG_POSITIONAL_SINGLE([positional-command-arg],[only one command is available: pull],[])
# ARG_HELP([Atlas is a CLI tool that has essentially one command: \`atlas pull\`\n \nAtlas defaults to using a configuration file named \`atlas.yml\` placed\nin the root directory. Configuration file:\n \npull:\n  branch: <branch-name>\n  directory <directory-name>\n  repository: <organization-name>/<repository-name>\n \nAtlas can also use a configuration file in a different path using the \`--config\` flag\nafter \`atlas\`: \`atlas --config pull\`.\n \nAtlas can also be used without a configuration file by using the flags below after\n\`atlas pull\`.\n \n\`-b\` or \`--branch\`\n\`-r\` or \`--repository\`\n\`-d\` or \`--directory\`\n])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


# # When called, the process ends.
# Args:
# 	$1: The exit message (print to stderr)
# 	$2: The exit code (default is 1)
# if env var _PRINT_HELP is set to 'yes', the usage is print to stderr (prior to $1)
# Example:
# 	test -f "$_arg_infile" || _PRINT_HELP=yes die "Can't continue, have to supply file as an argument, got '$_arg_infile'" 4
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


# Function that evaluates whether a value passed to it begins by a character
# that is a short option of an argument the script knows about.
# This is required in order to support getopts-like short options grouping.
begins_with_short_option()
{
	local first_option all_short_options='brdh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
# The positional args array has to be reset before the parsing, because it may already be defined
# - for example if this script is sourced by an argbash-powered script.
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_config=
_arg_branch=
_arg_repository=
_arg_directory=


# Function that prints general usage of the script.
# This is useful if users asks for it, or if there is an argument parsing error (unexpected / spurious arguments)
# and it makes sense to remind the user how the script is supposed to be called.
print_help()
{
	printf '%s\n' "Atlas is a CLI tool that has essentially one command: \`atlas pull\`

Atlas defaults to using a configuration file named \`atlas.yml\` placed
in the root directory. Configuration file:

pull:
  branch: <branch-name>
  directory <directory-name>
  repository: <organization-name>/<repository-name>

Atlas can also use a configuration file in a different path using the \`--config\` flag
after \`atlas\`: \`atlas --config pull\`.

Atlas can also be used without a configuration file by using the flags below after
\`atlas pull\`.

\`-b\` or \`--branch\`
\`-r\` or \`--repository\`
\`-d\` or \`--directory\`
"
	printf 'Usage: %s [--config <arg>] [-b|--branch <arg>] [-r|--repository <arg>] [-d|--directory <arg>] [-h|--help] <positional-command-arg>\n' "$0"
	printf '\t%s\n' "<positional-command-arg>: only one command is available: pull"
	printf '\t%s\n' "--config: path to alternative atlas.yaml configuration file (no default)"
	printf '\t%s\n' "-b, --branch: A branch of translation files (no default)"
	printf '\t%s\n' "-r, --repository: The repository containing translation files (no default)"
	printf '\t%s\n' "-d, --directory: Directory (name of the repository) containing translations to be downloaded (no default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


# The parsing of the command-line
parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			# We support whitespace as a delimiter between option argument and its value.
			# Therefore, we expect the --config value, so we watch for --config.
			# Since we know that we got the long option,
			# we just reach out for the next argument to get the value.
			--config)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_config="$2"
				shift
				;;
			# We support the = as a delimiter between option argument and its value.
			# Therefore, we expect --config=value, so we watch for --config=*
			# For whatever we get, we strip '--config=' using the ${var##--config=} notation
			# to get the argument value
			--config=*)
				_arg_config="${_key##--config=}"
				;;
			# See the comment of option '--config' to see what's going on here - principle is the same.
			-b|--branch)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_branch="$2"
				shift
				;;
			# See the comment of option '--config=' to see what's going on here - principle is the same.
			--branch=*)
				_arg_branch="${_key##--branch=}"
				;;
			# We support getopts-style short arguments grouping,
			# so as -b accepts value, we allow it to be appended to it, so we watch for -b*
			# and we strip the leading -b from the argument string using the ${var##-b} notation.
			-b*)
				_arg_branch="${_key##-b}"
				;;
			# See the comment of option '--config' to see what's going on here - principle is the same.
			-r|--repository)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_repository="$2"
				shift
				;;
			# See the comment of option '--config=' to see what's going on here - principle is the same.
			--repository=*)
				_arg_repository="${_key##--repository=}"
				;;
			# See the comment of option '-b' to see what's going on here - principle is the same.
			-r*)
				_arg_repository="${_key##-r}"
				;;
			# See the comment of option '--config' to see what's going on here - principle is the same.
			-d|--directory)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_directory="$2"
				shift
				;;
			# See the comment of option '--config=' to see what's going on here - principle is the same.
			--directory=*)
				_arg_directory="${_key##--directory=}"
				;;
			# See the comment of option '-b' to see what's going on here - principle is the same.
			-d*)
				_arg_directory="${_key##-d}"
				;;
			# The help argurment doesn't accept a value,
			# we expect the --help or -h, so we watch for them.
			-h|--help)
				print_help
				exit 0
				;;
			# We support getopts-style short arguments clustering,
			# so as -h doesn't accept value, other short options may be appended to it, so we watch for -h*.
			# After stripping the leading -h from the argument, we have to make sure
			# that the first character that follows coresponds to a short option.
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


# Check that we receive expected amount positional arguments.
# Return 0 if everything is OK, 1 if we have too little arguments
# and 2 if we have too much arguments
handle_passed_args_count()
{
	local _required_args_string="'positional-command-arg'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


# Take arguments that we have received, and save them in variables of given names.
# The 'eval' command is needed as the name of target variable is saved into another variable.
assign_positional_args()
{
	local _positional_name _shift_for=$1
	# We have an array of variables to which we want to save positional args values.
	# This array is able to hold array elements as targets.
	# As variables don't contain spaces, they may be held in space-separated string.
	_positional_names="_arg_positional_command_arg "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

# Now call all the functions defined above that are needed to get the job done
parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


parse_yaml() {
    # adapted from https://gist.github.com/pkuczynski/8665367
    local prefix=$2
    local s='[[:space:]]*' w='[a-zA-Z0-9_]*'
    local fs
    fs=$(echo @|tr @ '\034')
    sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  "$1" |
    awk -F"$fs" '{
        indent = length($1)/2;
        vname[indent] = $2;
        for (i in vname) {if (i > indent) {delete vname[i]}}
        if (length($3) > 0) {
            vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
            printf("%s%s%s=\"%s\"\n", "'"$prefix"'",vn, $2, $3);
        }
    }'
}

# only do stuff if the positional arg is "pull"
# for some reason shellcheck doesn't see this var as being set anywhere...
# shellcheck disable=SC2154
if [ "$_arg_positional_command_arg" == "pull" ]; # Download the translation files from a repository branch.
then
    # Set vars from config yaml
    if [ "$_arg_config" ];
    then
        eval "$(parse_yaml "$_arg_config")"
    else
        eval "$(parse_yaml atlas.yml)"
    fi

    # Override vars based on args
    if [ "$_arg_directory" ];
    then
        pull_directory=$_arg_directory
    fi

    if [ "$_arg_repository" ];
    then
        pull_repository=$_arg_repository
    fi

    if [ "$_arg_branch" ];
    then
        pull_branch=$_arg_branch
    fi

    # Output configured vars to user
    echo "Pulling translation files"
    echo " - directory: $pull_directory"
    echo " - repository: $pull_repository"
    echo " - branch: $pull_branch"

    # Create temp dir for translations
    mkdir translations_TEMP
    cd translations_TEMP || exit

    # Initialize git repo and add remote
    git init -b main
    remote_url="https://github.com/$pull_repository.git"
    git remote add -f origin "$remote_url"

    # If a directory is specified, configure git for a sparse checkout
    if [ "$pull_directory" ];
    then
        git config core.sparseCheckout true
        git sparse-checkout init
        git sparse-checkout set "$pull_directory"
    fi

    # Retrieve translation files from the repo
    git pull origin "$pull_branch"

    # Remove .git directory
    rm -rf .git

    # Leave the temp dir
    cd ..

    # Copy translation files out of the temp dir
    if [ "$pull_directory" ];
    then
        cp -r translations_TEMP/"$pull_directory"/* ./
    else
        cp -r translations_TEMP/* ./
    fi

    # Remove the temp dir
    rm -rf translations_TEMP
fi

# ] <-- needed because of Argbash
